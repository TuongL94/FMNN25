1. Lecture

datatypes
float		-1.0
integer	-1
complex -> 1+3j
string	"anna's baby", 'anna' ('a'+2*'n'+a)

Container types
l=[3,3.0,'anna',[1,2]] list (first index is 0)
l[0]	#3
slicing l[1:3]	#[3.0,'anna'] (without the last one => use length)

l[:-1] (-1=the last one) (take all except the last one)
l[-3:] #[3.0,'anna',[1,2]]

dictionary
st={'name':'anna','pers':'19....','program':'F'}
st['pers']

linebreaks!!!

a= \(<-to tell the compiler that here is a linebreak)
3
a=[1,
3,4]

a=set([1,2,2,3,4])
a	#{1,2,3,4}

idea: clear duplicates => list->set->list (but do not ensure the same ordering, because set has no ordering)

tupel:
a=(3,4) (the paratheses are not needed!)
a[1]=5
tupel is immutable
a=3, is a tupel


l=[0]
l=3000*l (=[0,0,...,0] - 3000 times <=> l*=3000)

array
v=array([1,2,3.]) (only the same datatypes of objects in it)
k=3*v
k	#array([3.,6.,9.])
v[0]
transpose on array does nothing
v.reshape((3,1)) (now transpose makes sense)

not-dot-product
v*v	(#[1,4,9])
dot-product
v@v <=> dot(v,v) (needs the same dimension)

[] None
a=True
3>4 or 4>3
==
'anna' or False

Boolean arrays (homework)
4<5<3 => True(=1)<3 => True
3<x<5

Python has no and!

for a in [1,2,4,5]:
	|
	|
	|
	|	(it is necessary to use tabs, intentations matters)
c=3
print(a)


functions:
def name(....):
	|
	|
	return a,b (return always one thing.. here it is a tupel)
c=name(3,4)
d,e=name(3,4)
(packing and unpacking)

no return => none object would be returned

name(a,b,c,d,e)
l=[1,2,3,4,5]
c=name(*l)
d={'f':3,'a':4,...}
name(**d)

def name(a,b,**kwargs) (keywordarguments.. put it in a dictionary)
loop through the dictionary and take out what you need

quad(f,a,v,*args)
f(x,*args)

2. Lecture

scipy
numpy
matplotlib

make packages available:
import scipy
a=scipy.sin(scipy.pi)
%2. alternative (for advandced packages)
import scipy as se
a=sc.sin(sc.pi)
%3. alternative
from scipy import sin,pi
a=sin(pi)
%4. alternative (we use this alternative for scipy)
from scipy import *
a=sin(pi)

datatypes:
a=[1,2,3]
methods for datatypes:
a+a	#=[1,2,3,1,2,3]

wish-list (Rational number)
a) Instantiation
r=RationalNumber(30,40)	#3/4
b) Attributes
r.numerator		#40
r.denominator		#30
c)Methods
r.shorten()		#3/4
r.__str__()		#hidden (but not private)

__ge__	#greater-equals
__lt__	#less than
__mult__	#mult
__iadd__	#+=
__item__	#r[]
__call__	#r()
__radd__	#other+self
__add__	#self+other

protect attributes: (hide attributes)
class triangle
	def __init__(self,A,B,C)
		self._A=A
		self._B=B
		self._C=C
		...
	def getA(self):
		...
	A=property(getA,setA,documentationA,delA)

t.A= #calls the setterfunction

tomorrow: blossoms and splines